[{"/Users/madhurdixit/Downloads/yanft/src/index.js":"1","/Users/madhurdixit/Downloads/yanft/src/App.js":"2","/Users/madhurdixit/Downloads/yanft/src/Vote.js":"3","/Users/madhurdixit/Downloads/yanft/src/Navbar.js":"4","/Users/madhurdixit/Downloads/yanft/src/Lock.js":"5","/Users/madhurdixit/Downloads/yanft/src/Home.js":"6","/Users/madhurdixit/Downloads/yanft/src/Mast.js":"7","/Users/madhurdixit/Downloads/yanft/src/Poap.js":"8","/Users/madhurdixit/Downloads/yanft/src/Create.js":"9","/Users/madhurdixit/Downloads/yanft/src/BlogDetails.js":"10","/Users/madhurdixit/Downloads/yanft/src/TxList3.js":"11","/Users/madhurdixit/Downloads/yanft/src/TxList.js":"12","/Users/madhurdixit/Downloads/yanft/src/ErrorMessage.js":"13","/Users/madhurdixit/Downloads/yanft/src/TxList2.js":"14"},{"size":824,"mtime":1648838691000,"results":"15","hashOfConfig":"16"},{"size":1133,"mtime":1648851153000,"results":"17","hashOfConfig":"16"},{"size":10644,"mtime":1648995730494,"results":"18","hashOfConfig":"16"},{"size":1063,"mtime":1648993081111,"results":"19","hashOfConfig":"16"},{"size":9338,"mtime":1648996215401,"results":"20","hashOfConfig":"16"},{"size":1635,"mtime":1648982594000,"results":"21","hashOfConfig":"16"},{"size":10191,"mtime":1648996540142,"results":"22","hashOfConfig":"16"},{"size":10589,"mtime":1648991472000,"results":"23","hashOfConfig":"16"},{"size":135,"mtime":1648384230000,"results":"24","hashOfConfig":"16"},{"size":6500,"mtime":1648994140272,"results":"25","hashOfConfig":"16"},{"size":897,"mtime":1648995448439,"results":"26","hashOfConfig":"16"},{"size":1399,"mtime":1648991259000,"results":"27","hashOfConfig":"16"},{"size":692,"mtime":1648997083369,"results":"28","hashOfConfig":"16"},{"size":610,"mtime":1649007687020,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"17shays",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/madhurdixit/Downloads/yanft/src/index.js",[],["68","69"],"/Users/madhurdixit/Downloads/yanft/src/App.js",[],"/Users/madhurdixit/Downloads/yanft/src/Vote.js",["70","71","72","73","74","75","76","77","78","79","80","81","82"],"\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport erc20abi from \"./ERC20abi.json\";\nimport erc721abi from \"./ERC721abi.json\";\nimport borgabi from \"./Borg.json\";\nimport factoryabi from \"./Factoryabi.json\";\nimport { gql } from \"@apollo/client\";\nimport { client } from \"./index\";\nimport BigNumber from \"big-number\";\nimport styles from \"./styles.css\";\nimport icon from \"./assets/icon.png\";\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList3 from \"./TxList3\";\n\n\nconst CONTRACT_ADDRESS = \"0xFbCfa71Edfa6a7C4145A11b5417C4bc571F6f851\";\n\nexport default function Vote() {\n  const state = {\n    button: 1,\n  };\n  const [txs, setTxs] = useState([]);\n  const [contractListened, setContractListened] = useState();\n  const [error, setError] = useState();\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\",\n  });\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\",\n  });\n  const [tableData, setTableData] = useState([]);\n  const [totalFunds, setTotalFunds] = useState(\"0\");\n  let totalVote = 0;\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          query {\n            proposalEntities {\n    id\n    proposalID\n    fundAddress\n    fundAmount\n    proposalStatus\n    voteCount\n  }\n\n\n          }\n\n        `,\n      })\n      .then((result) => {\n        setTableData([...result.data.proposalEntities]);\n      });\n  }, []);\n\n\n  useEffect(() => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    \n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,provider);\n    contractObj.projectFund()\n      .then((result) => {\n        setTotalFunds(result.toString());\n      });\n  }, []);\n\n  useEffect(() => {\n    if (contractInfo.address !== \"-\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const erc20 = new ethers.Contract(\n        contractInfo.address,\n        erc20abi,\n        provider\n      );\n\n      erc20.on(\"Transfer\", (from, to, amount, event) => {\n        console.log({ from, to, amount, event });\n\n        setTxs((currentTxs) => [\n          ...currentTxs,\n          {\n            txHash: event.transactionHash,\n            from,\n            to,\n            amount: String(amount),\n          },\n        ]);\n      });\n      setContractListened(erc20);\n\n      return () => {\n        contractListened.removeAllListeners();\n      };\n    }\n  }, [contractInfo.address]);\n\n  const setErrorHandler = (val) => {\n      setError(\n        ErrorMessage({\n          message: val,\n        })\n      );\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    \n  };\n\n  const handleAddProposal = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    \n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"projaddress\"))\n    await console.log(data.get(\"projamount\"))\n    let projamount = BigNumber(data.get(\"projamount\")*(10**18)).toString()\n    \n\n    try {\n      \n        await console.log(\"Proposal add Clicked\")\n          await contractObj.addProposal(data.get(\"projaddress\"),projamount);\n    \n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n    \n  };\n  \n  \n\n  const handlePropVote = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    \n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"propvote\"))\n    \n\n    try {\n      \n        await console.log(\"Proposal vote Clicked\")\n          await contractObj.vote(data.get(\"propvote\"));\n    \n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n  };\n\n\n  const handleExecuteVote = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    \n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"propvote\"))\n    \n\n    try {\n      \n        await console.log(\"Proposal vote Clicked\")\n          await contractObj.executeVote(data.get(\"propvote\"));\n    \n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n  };\n  \n  function chunkArray(arr,n){\n    var chunkLength = Math.max(arr.length/n ,1);\n    var chunks = [];\n    for (var i = 0; i < n; i++) {\n        if(chunkLength*(i+1)<=arr.length)chunks.push(arr.slice(chunkLength*i, chunkLength*(i+1)));\n    }\n    return chunks; \n}\n\n  return (\n    <>\n\n<div id=\"app\" class=\"sub-app-section wf-section\">\n    <div class=\"sub-app-wrapper-1\">\n      <div class=\"w-form\">\n          <div class=\"add-vote\">\n            <div class=\"add-proposal\">\n            <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\"form2\" onSubmit={handleAddProposal}>\n            <h2 class=\"sub-h2 alt-h2\">Fund another project</h2>\n              <label for=\"text\" class=\"sub-form-label\">Project to be funded</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"projaddress\" data-name=\"Name 2\" placeholder=\"Address of Project Owner\" id=\"projaddress\" required=\"\"></input>\n              <label for=\"text\" class=\"sub-form-label\">Amount to be funded</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftsymbol\" maxlength=\"256\" name=\"projamount\" data-name=\"Email 2\" placeholder=\"Amount to be funded\" id=\"projamount\" required=\"\"></input>\n              <input type=\"submit\" onClick={() => (state.button = 2)} value=\"ADD PROPOSAL\" data-wait=\"Please wait...\" class=\"submit-button w-button\"></input>\n            </form>\n            <div class=\"w-form-done\">\n              <div>Thank you! Your submission has been received!</div>\n              </div>\n              <div class=\"w-form-fail\">\n              <div>Oops! Something went wrong while submitting the form.</div>\n              </div>\n            </div>\n            <div class=\"vote-proposal\">\n            \n            <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\"form2\" onSubmit={handlePropVote}>\n            <h2 class=\"sub-h2 alt-h2\">Vote on Proposal</h2>\n              <label for=\"text\" class=\"sub-form-label\">Proposal ID to vote</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"propvote\" data-name=\"Name 2\" placeholder=\"Proposal ID\" id=\"propvote\" required=\"\"></input>\n              <input type=\"submit\" onClick={() => (state.button = 2)} value=\"VOTE PROPOSAL\" data-wait=\"Please wait...\" class=\"submit-button w-button\"></input>\n             </form>\n\n          </div>\n          </div>\n          </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n    <h2 class=\"alt-h3\">Community Funds : {(Number(totalFunds)/(10**18)).toString()} ETH</h2>\n  </div>\n\n\n  \n  <div id=\"app\" class=\"sub-app-section withdraw-contract wf-section\">\n  <div class=\"sub-app-wrapper-1 withdraw-bloc\">\n      <div class=\"w-form execute\">\n        <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\" execute-form\" onSubmit={handleExecuteVote}>\n        <h2 class=\"sub-h2\">Execute Proposal(only for owner)</h2>\n          <div class=\"div-block\">\n            <div class=\"div-block-2\">\n              <label for=\"text\" class=\"sub-form-label\">Project ID to execute</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"propvote\" data-name=\"Name 2\" placeholder=\"NFT Address\" id=\"propvote\" required=\"\"></input>\n            </div>\n          </div>    \n          <input type=\"submit\" onClick={() => (state.button = 2)} value=\"EXECUTE PROPOSAL\" data-wait=\"Please wait...\" class=\"submit-button w-button\"></input>\n        </form>\n        <div class=\"w-form-done\">\n          <div>Thank you! Your submission has been received!</div>\n        </div>\n        <div class=\"w-form-fail\">\n          <div>Oops! Something went wrong while submitting the form.</div>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n   \n  \n  <div id=\"app\" class=\"sub-recent wf-section\">\n    <div class=\"sub-app-wrapper-3\">\n      <h2 class=\"sub-h2\">Proposals Posted</h2>\n      <div class=\"w-layout-grid grid\">\n        <div id=\"w-node-_5c0edcd0-be75-3544-4a1a-61ea9d6c71eb-08db29d9\" class=\"info-card-main\">\n        {console.log(tableData)}\n        <TxList3 txs={chunkArray(tableData,[2])[1]} />\n        </div>\n        \n        <div id=\"w-node-_5f9e2abd-4801-26ba-696e-77b214c9096f-08db29d9\" class=\"info-card-main\">\n        {console.log(tableData)}\n        <TxList3 txs={chunkArray(tableData,[2])[0]} />\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n        \n\n        {\n          // tableData.map(function(element){\n          //   return(\n\n              \n          //     )\n          // })\n        }\n\n\n        {/* <Link to={{\n    pathname: \"/blogs/0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7\",\n    state: {\n      fromText: \"this is data\",\n    }\n  }}>\n            <h2>0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</h2>\n            <p>Written by 0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</p>\n          </Link> */}\n    \n      \n    \n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/Navbar.js",["83","84","85","86","87","88","89","90","91","92"],"import { Link } from \"react-router-dom\";\nimport { ethers } from \"ethers\";\nimport factoryabi from \"./Factoryabi.json\";\n\nimport { useState, useEffect } from \"react\";\n\nconst CONTRACT_ADDRESS = \"0xFbCfa71Edfa6a7C4145A11b5417C4bc571F6f851\";\n\nconst Navbar = () => {\n\n  \n\n\n\n  return (\n  \n    <div class=\"navbar w-nav\">\n    <div class=\"container-2 w-container\">\n      <a href=\"/\"><img src=\"https://assets.website-files.com/623cdb6cabbcc2187cf3c9db/62402ee7856247337c3acc4c_Yanft-logo.svg\" loading=\"lazy\" width=\"121px\" height=\"48px\" alt=\"\" class=\"image-2\"></img></a>\n      <nav role=\"navigation\" class=\"w-nav-menu\">\n      <Link to=\"/\"><a aria-current=\"page\" class=\"nav-items w-nav-link\">Home</a></Link>\n      <Link to=\"/deploy\"><a class=\"nav-items w-nav-link\">Deploy</a></Link>\n      <Link to=\"/voting\"><a class=\"nav-items w-nav-link\">Vote</a></Link>\n      <Link to=\"/locknft\"><a class=\"nav-items w-nav-link\">Lock</a></Link>\n      <Link to=\"/poap\"><a class=\"nav-items w-nav-link\">POAP</a></Link>\n      \n      </nav>\n    </div>\n  </div>\n    \n  );\n}\n \nexport default Navbar;","/Users/madhurdixit/Downloads/yanft/src/Lock.js",["93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport erc20abi from \"./ERC20abi.json\";\nimport erc721abi from \"./ERC721abi.json\";\nimport borgabi from \"./Borg.json\";\nimport factoryabi from \"./Factoryabi.json\";\nimport { gql } from \"@apollo/client\";\nimport { client } from \"./index\";\nimport BigNumber from \"big-number\";\nimport styles from \"./styles.css\";\nimport icon from \"./assets/icon.png\";\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList2 from \"./TxList2\";\n\n\nconst CONTRACT_ADDRESS = \"0xFbCfa71Edfa6a7C4145A11b5417C4bc571F6f851\";\n\nexport default function Lock() {\n  const state = {\n    button: 1,\n  };\n  const [txs, setTxs] = useState([]);\n  const [contractListened, setContractListened] = useState();\n  const [error, setError] = useState();\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\",\n  });\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\",\n  });\n  const [tableData, setTableData] = useState([]);\n  let totalVote2 = 0\n  let totalVote = 0\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          query {\n            userEntities{\n    id\n    userAddress\n    votingPower\n  }\n\n          }\n\n        `,\n      })\n      .then((result) => {\n        setTableData([...result.data.userEntities]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (contractInfo.address !== \"-\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const erc20 = new ethers.Contract(\n        contractInfo.address,\n        erc20abi,\n        provider\n      );\n\n      erc20.on(\"Transfer\", (from, to, amount, event) => {\n        console.log({ from, to, amount, event });\n\n        setTxs((currentTxs) => [\n          ...currentTxs,\n          {\n            txHash: event.transactionHash,\n            from,\n            to,\n            amount: String(amount),\n          },\n        ]);\n      });\n      setContractListened(erc20);\n\n      return () => {\n        contractListened.removeAllListeners();\n      };\n    }\n  }, [contractInfo.address]);\n\n  const setErrorHandler = (val) => {\n      setError(\n        ErrorMessage({\n          message: val,\n        })\n      );\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    \n  };\n\n  const handleLocktNFT = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    const erc721ObjL = new ethers.Contract(data.get(\"nftaddress\"),erc721abi,signer)\n    \n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"nftaddress\"))\n    await console.log(data.get(\"tokenid\"))\n\n    \n\n    try {\n      if(state.button==1){\n          await console.log(\"Approve Clicked\")\n          await erc721ObjL.approve(CONTRACT_ADDRESS,data.get(\"tokenid\"));\n      }else{\n        await console.log(\"Lock Clicked\")\n          await contractObj.lockNFT(data.get(\"nftaddress\"),data.get(\"tokenid\"));\n    }\n    } catch (error) {\n      await console.log(error.data.message)\n      // setErrorHandler(error.message)\n      \n    }\n    \n  };\n  \n  \n\n  const handleUnLocktNFT = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    const erc721ObjL = new ethers.Contract(data.get(\"nftaddress\"),erc721abi,signer)\n    \n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"nftaddress\"))\n    await console.log(data.get(\"tokenid\"))\n\n    \n\n    try {\n      \n        await console.log(\"Lock Clicked\")\n          await contractObj.unlockNFT(data.get(\"nftaddress\"),data.get(\"tokenid\"));\n    \n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n  };\n\n  function chunkArray(arr,n){\n    var chunkLength = Math.max(arr.length/n ,1);\n    var chunks = [];\n    for (var i = 0; i < n; i++) {\n        if(chunkLength*(i+1)<=arr.length)chunks.push(arr.slice(chunkLength*i, chunkLength*(i+1)));\n    }\n    return chunks; \n}\n\n\n  return (\n    <>\n\n<div id=\"app\" class=\"sub-app-section wf-section\">\n    <div class=\"sub-app-wrapper-1\">\n      <div class=\"w-form\">\n        <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\"form\" onSubmit={handleLocktNFT}>\n          <div class=\"div-block\">\n            <div class=\"lock-div\">\n            <h2 class=\"sub-h2\">Lock your NFT for voting power</h2>\n              <label for=\"text\" class=\"sub-form-label\">Enter your NFT address *</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"nftaddress\" data-name=\"Name 2\" placeholder=\"NFT Address\" id=\"nftaddress\" required=\"\"></input>\n              <label for=\"text\" class=\"sub-form-label\">Enter Token ID of your NFT *</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftsymbol\" maxlength=\"256\" name=\"tokenid\" data-name=\"Email 2\" placeholder=\"TokenID of NFT\" id=\"tokenid\" required=\"\"></input>\n              \n            </div>\n          </div>\n          <div class=\"submit-btn-flex\">\n          <input type=\"submit\" onClick={() => (state.button = 1)} value=\"APPROVE\" data-wait=\"Please wait...\" class=\"submit-button w-button lock\"></input>\n          <br></br>\n          <input type=\"submit\" onClick={() => (state.button = 2)} value=\"LOCK NFT\" data-wait=\"Please wait...\" class=\"submit-button w-button lock\"></input>\n        </div></form>\n        <div class=\"w-form-done\">\n          <div>Thank you! Your submission has been received!</div>\n        </div>\n        <div class=\"w-form-fail\">\n          <div>Oops! Something went wrong while submitting the form.</div>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  <div id=\"app\" class=\"sub-app-section withdraw-contract wf-section\">\n    <div class=\"sub-app-wrapper-1 withdraw-bloc\">\n      <div class=\"mint-grid\">\n        <div class=\"withdraw\">\n        <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\"form\" onSubmit={handleUnLocktNFT}>\n\n          <div class=\"div-block\">\n          <div class=\"lock-div\">\n            <h2 class=\"sub-h2\">Unlock Your NFT</h2>\n              <label for=\"text\" class=\"sub-form-label\">Enter your NFT address *</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"nftaddress\" data-name=\"Name 2\" placeholder=\"NFT Address\" id=\"nftaddress\" required=\"\"></input>\n              <label for=\"text\" class=\"sub-form-label\">Enter Token ID of your NFT *</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftsymbol\" maxlength=\"256\" name=\"tokenid\" data-name=\"Email 2\" placeholder=\"TokenID of NFT\" id=\"tokenid\" required=\"\"></input>\n              <input type=\"submit\" onClick={() => (state.button = 2)} value=\"UNLOCK NFT\" data-wait=\"Please wait...\" class=\"submit-button w-button\"></input>\n\n            </div>\n          </div>\n        </form>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n\n  <div id=\"app\" class=\"sub-recent wf-section\">\n    <div class=\"sub-app-wrapper-3\">\n      <h2 class=\"sub-h2\">Voting Powers</h2>\n      <div class=\"w-layout-grid grid\">\n        <div id=\"w-node-_5c0edcd0-be75-3544-4a1a-61ea9d6c71eb-08db29d9\" class=\"info-card-main\">\n        {console.log(tableData)}\n        <TxList2 txs={chunkArray(tableData,[2])[1]} />\n       \n        </div>\n        \n        <div id=\"w-node-_5f9e2abd-4801-26ba-696e-77b214c9096f-08db29d9\" class=\"info-card-main\">\n        {console.log(tableData)}\n        <TxList2 txs={chunkArray(tableData,[2])[0]} />\n        {\n          tableData.forEach(element => {\n            totalVote = BigNumber(totalVote).plus(BigNumber(element[\"votingPower\"])).toString()\n            \n          })\n        }\n        \n        </div>\n        <h2 class=\"alt-h3\">Total Voting Power : {(Number(totalVote)/(10**18)).toString()}</h2>\n        \n      </div>\n    </div>\n  </div>\n        \n\n        {\n          // tableData.map(function(element){\n          //   return(\n\n              \n          //     )\n          // })\n        }\n\n\n        {/* <Link to={{\n    pathname: \"/blogs/0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7\",\n    state: {\n      fromText: \"this is data\",\n    }\n  }}>\n            <h2>0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</h2>\n            <p>Written by 0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</p>\n          </Link> */}\n    \n      \n    \n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/Home.js",["107","108","109","110","111","112","113","114","115","116","117","118","119"],"\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport erc20abi from \"./ERC20abi.json\";\nimport borgabi from \"./Borg.json\";\nimport factoryabi from \"./Factoryabi.json\";\nimport { gql } from \"@apollo/client\";\nimport { client } from \"./index\";\nimport BigNumber from \"big-number\";\nimport styles from \"./styles.css\";\nimport icon from \"./assets/icon.png\";\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList from \"./TxList\";\n\n\nexport default function Home() {\n  \n  return (\n    <>\n  <div id=\"home\" class=\"sub-section sec-width\">\n    <div class=\"sub-wrapper-1\">\n      <h1 class=\"sub-h1\">Deploy <span class=\"sub-h1-gradient\">no-code, low-gas </span>NFT ERC-721 smart contract</h1>\n    </div>\n    <div class=\"sub-wrapper-2\">\n      <div class=\"sub-wrapper-content\">\n        <div class=\"sub-body-wrapper\">\n          <div class=\"sub-body-copy\">YaNFT will empower web3 creators to have a concrete on-chain foundation with true creative ownership of their art &amp; smart contracts. All this with the lowest gas fees to mint their own contracts.</div>\n        </div>\n        <div class=\"sub-cta-wrapper\">\n        <Link class=\"deploy-link\"variant=\"body2\"\n              to={{\n                pathname: `/deploy`\n              }}\n                >\n          <a href=\"create.html\" class=\"sub-cta \">\n            <div class=\"sub-cta-text\">LAUNCH APP</div></a></Link>\n        </div>\n      </div>\n      <div class=\"sub-footer\">\n        <div class=\"sub-footer-text\">Developed by team<span class=\"text-span-2\"> @NFTKnights</span></div>\n      </div>\n    </div>\n  </div>\n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/Mast.js",["120","121","122","123","124","125","126","127","128","129","130","131"],"\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport erc20abi from \"./ERC20abi.json\";\nimport borgabi from \"./Borg.json\";\nimport factoryabi from \"./Factoryabi.json\";\nimport { gql } from \"@apollo/client\";\nimport { client } from \"./index\";\nimport BigNumber from \"big-number\";\nimport styles from \"./styles.css\";\nimport icon from \"./assets/icon.png\";\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList from \"./TxList\";\n\n\nconst CONTRACT_ADDRESS = \"0xFbCfa71Edfa6a7C4145A11b5417C4bc571F6f851\";\n\nexport default function Home() {\n  const state = {\n    button: 1,\n  };\n  const [txs, setTxs] = useState([]);\n  const [contractListened, setContractListened] = useState();\n  const [error, setError] = useState();\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\",\n  });\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\",\n  });\n  const [tableData, setTableData] = useState([]);\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          query {\n            nftEntities {\n              id\n              contractAddress\n              contractInitialOwner\n              tokenName\n              tokenSymbol\n              limit\n              mintAmount\n              dynamic\n            }\n          }\n\n        `,\n      })\n      .then((result) => {\n        setTableData([...result.data.nftEntities]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (contractInfo.address !== \"-\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const erc20 = new ethers.Contract(\n        contractInfo.address,\n        erc20abi,\n        provider\n      );\n\n      erc20.on(\"Transfer\", (from, to, amount, event) => {\n        console.log({ from, to, amount, event });\n\n        setTxs((currentTxs) => [\n          ...currentTxs,\n          {\n            txHash: event.transactionHash,\n            from,\n            to,\n            amount: String(amount),\n          },\n        ]);\n      });\n      setContractListened(erc20);\n\n      return () => {\n        contractListened.removeAllListeners();\n      };\n    }\n  }, [contractInfo.address]);\n\n  const setErrorHandler = (val) => {\n      console.log(\"Inside Handler\")\n      setError(\n        ErrorMessage({\n          message: val,\n        })\n      );\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    \n  };\n\n  const handleMintNFT = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    let bndata = await contractObj.getLatestPrice().then((response)=>{\n      return(response);\n    })\n    await console.log(\"Hello\")\n    let fiveusd = BigNumber(\"50\").multiply(BigNumber(\"100000000000000000000000000\")).divide(BigNumber(bndata.toString()));\n    let finalDol = BigNumber(fiveusd.toString()).add(BigNumber(1000000000))\n    await console.log(finalDol.toString())\n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"nftname\"))\n    await console.log(data.get(\"nftsymbol\"))\n    await console.log(data.get(\"nftlimit\"))\n    await console.log(data.get(\"nftamount\"))\n    let namount = await data.get(\"nftamount\")\n    await console.log(namount*(10**18))\n    namount = BigNumber(namount*(10**18)).toString()\n    await console.log(\"---\",namount.toString())\n    await console.log(data.get(\"baseURI\"))\n    await console.log(data.get(\"radio\"))\n    await console.log(finalDol)\n    let ds = false;\n    if(data.get(\"radio\")===\"dynamic\"){\n      ds = true\n    }else{\n      ds = false\n    }\n\n    try {\n      \n      await contractObj.createStorage(data.get(\"nftname\"),data.get(\"nftsymbol\"),data.get(\"nftlimit\"),namount,ds,data.get(\"baseURI\"),false,{ value: finalDol.toString() });\n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n    \n  };\n  \n  \n\n  const handleSetSlotURI = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    try {\n      \n      await contractObj.withdrawFees();\n    } catch (error) {\n      try{\n        await console.log(error.data.message)\n        setErrorHandler(error.data.message)\n\n      }catch(error2){\n        setErrorHandler(\"something went wrong\")\n      }\n      \n    }\n  };\n\n  function chunkArray(arr,n){\n     var chunkLength = Math.max(arr.length/n ,1);\n     var chunks = [];\n     for (var i = 0; i < n; i++) {\n         if(chunkLength*(i+1)<=arr.length)chunks.push(arr.slice(chunkLength*i, chunkLength*(i+1)));\n     }\n     return chunks; \n }\n\n  \n\n\n  return (\n    <>\n\n<div id=\"app\" class=\"sub-app-section wf-section\">\n    <div class=\"sub-app-wrapper-1\">\n      <h2 class=\"sub-h2\">Deploy your NFT ERC-721 in minutes</h2>\n      <div class=\"w-form\">\n        <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\"form\" onSubmit={handleMintNFT}>\n          <div class=\"div-block\">\n            <div class=\"div-block-2\">\n              <label for=\"text\" class=\"sub-form-label\">Enter your NFT collection/ project name*</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"nftname\" data-name=\"Name 2\" placeholder=\"Eg. MY NFT Project\" id=\"nftname\" required=\"\"></input>\n              <label for=\"text\" class=\"sub-form-label\">Give your project a token name *</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftsymbol\" maxlength=\"256\" name=\"nftsymbol\" data-name=\"Email 2\" placeholder=\"Eg: $MYNFT\" id=\"nftsymbol\" required=\"\"></input>\n              <label for=\"text\" class=\"sub-form-label\">Enter IPFS Base URI of your NFT collection/ project*</label>\n              <input type=\"text\" class=\"sub-input-field w-input baseURI\" maxlength=\"256\" name=\"baseURI\" data-name=\"Email 2\" placeholder=\"Eg: ipfs://..\" id=\"baseURI\" required=\"\"></input>\n              </div>\n              <div class=\"div-block-3\">\n                <label for=\"field-4\" class=\"sub-form-label\">Enter your NFT supply*</label>\n                <input type=\"text\" class=\"sub-input-field w-input nftlimit\" maxlength=\"256\" name=\"nftlimit\" data-name=\"Field 3\" placeholder=\"Eg: 8888 or 10000\" id=\"nftlimit\" required=\"\"></input>\n                <label for=\"field-4\" class=\"sub-form-label\">Enter price of each NFT *</label>\n                <input type=\"text\" class=\"sub-input-field w-input nftamount\" maxlength=\"256\" name=\"nftamount\" data-name=\"Field 2\" placeholder=\"Eg: 0.1 ETH, 0.08 ETH\" id=\"nftamount\" required=\"\"></input>\n                <label for=\"email-3\" class=\"sub-form-label\">Do you want your project to have reveal feature?*</label>\n                <div class=\"sub-input-field\">\n                  <label class=\"radio-button-field-2 w-radio\">\n                    <input type=\"radio\" data-name=\"Radio\" id=\"radio\" name=\"radio\" value=\"dynamic\" class=\"w-form-formradioinput radio-button w-radio-input exampleRadios\"></input>\n                    <span class=\"radio-lbl w-form-label\" for=\"radio\">Yes</span></label>\n                  <label class=\"radio-button-field w-radio\">\n                    <input type=\"radio\" data-name=\"Radio 3\" id=\"radio-3\" name=\"radio\" value=\"static\" class=\"w-form-formradioinput radio-button w-radio-input exampleRadios\"></input>\n                    <span class=\"radio-lbl w-form-label\" for=\"radio-3\">No</span></label></div>\n            </div>\n          </div><input type=\"submit\" value=\"DEPLOY CONTRACT\" data-wait=\"Please wait...\" class=\"submit-button\"></input>\n        </form>\n        <div class=\"w-form-done\">\n          <div>Thank you! Your submission has been received!</div>\n        </div>\n        <div class=\"w-form-fail\">\n          <div>Oops! Something went wrong while submitting the form.</div>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n<div clas=\"flex-display\">\n  <div id=\"app\" class=\"sub-app-section withdraw-contract wf-section\">\n    <div class=\"sub-app-wrapper-1 withdraw-bloc\">\n      <div class=\"mint-grid\">\n        <div class=\"withdraw\">\n        <form onSubmit={handleSetSlotURI}>\n          <h2 class=\"sub-h2 mint-heading-copy\">Withdraw funds</h2>\n          <div class=\"contract-info\">You can withdraw your funds from below</div>\n          <button class=\"submit-button mint \">\n            <div class=\"text-block\">WITHDRAW FUNDS</div>\n          </button>\n          </form>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  </div>\n\n  <div id=\"app\" class=\"sub-recent wf-section\">\n    <div class=\"sub-app-wrapper-3\">\n      <h2 class=\"sub-h2\">NFT Contract Deployments</h2>\n      <div class=\"w-layout-grid grid\">\n        <div id=\"w-node-_5c0edcd0-be75-3544-4a1a-61ea9d6c71eb-08db29d9\" class=\"info-card-main\">\n        <TxList txs={chunkArray(tableData,[2])[1]} />\n        </div>\n        \n        <div id=\"w-node-_5f9e2abd-4801-26ba-696e-77b214c9096f-08db29d9\" class=\"info-card-main\">\n        <TxList txs={chunkArray(tableData,[2])[0]} />\n        </div>\n      </div>\n    </div>\n  </div>\n\n        \n\n        {\n          // tableData.map(function(element){\n          //   return(\n\n              \n          //     )\n          // })\n        }\n\n\n        {/* <Link to={{\n    pathname: \"/blogs/0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7\",\n    state: {\n      fromText: \"this is data\",\n    }\n  }}>\n            <h2>0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</h2>\n            <p>Written by 0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</p>\n          </Link> */}\n    \n      \n    \n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/Poap.js",["132","133","134","135","136","137","138","139","140","141","142","143","144"],"\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport erc20abi from \"./ERC20abi.json\";\nimport borgabi from \"./Borg.json\";\nimport factoryabi from \"./Factoryabi.json\";\nimport { gql } from \"@apollo/client\";\nimport { client } from \"./index\";\nimport BigNumber from \"big-number\";\nimport styles from \"./styles.css\";\nimport icon from \"./assets/icon.png\";\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from \"./ErrorMessage\";\nimport TxList from \"./TxList\";\nimport axios from \"axios\";\n\n\nconst CONTRACT_ADDRESS = \"0xFbCfa71Edfa6a7C4145A11b5417C4bc571F6f851\";\nconst nftStorateKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDkzOTk5OTQ3N0UzRUVhYTdBMmVCNDc0MmNGRDI4Rjc4QjUxNzRhNDkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0NzExMjE1ODcxOCwibmFtZSI6InRlc3QifQ.as0TbVmwnZP7H0XLOK_wpFARDUBT-7hEHJnP8pjKq8g\"\n\nconst pinataAPIkey = \"315080d889573d52d81f\"\nconst pinataSecret = \"9c0a50e90dfa23f69a706454e5cf6028847bc82e25de9eee4a919cb8ec09d911\"\nconst pinataURL = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n\nexport default function Poap() {\n  const state = {\n    button: 1,\n  };\n  const [txs, setTxs] = useState([]);\n  const [contractListened, setContractListened] = useState();\n  const [error, setError] = useState();\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\",\n  });\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\",\n  });\n  const [tableData, setTableData] = useState([]);\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          query {\n            nftEntities {\n              id\n              contractAddress\n              contractInitialOwner\n              tokenName\n              tokenSymbol\n              limit\n              mintAmount\n              dynamic\n            }\n          }\n\n        `,\n      })\n      .then((result) => {\n        setTableData([...result.data.nftEntities]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (contractInfo.address !== \"-\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const erc20 = new ethers.Contract(\n        contractInfo.address,\n        erc20abi,\n        provider\n      );\n\n      erc20.on(\"Transfer\", (from, to, amount, event) => {\n        console.log({ from, to, amount, event });\n\n        setTxs((currentTxs) => [\n          ...currentTxs,\n          {\n            txHash: event.transactionHash,\n            from,\n            to,\n            amount: String(amount),\n          },\n        ]);\n      });\n      setContractListened(erc20);\n\n      return () => {\n        contractListened.removeAllListeners();\n      };\n    }\n  }, [contractInfo.address]);\n\n  const setErrorHandler = (val) => {\n      setError(\n        ErrorMessage({\n          message: val,\n        })\n      );\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    \n  };\n\n  const handleMintNFT = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    let file = data.get(\"FormFile\")\n    let filedata = file\n    await console.log(filedata)\n    const url = \"https://api.nft.storage/upload\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${nftStorateKey}`,\n        Accept: \"application/json\",\n        \"Content-Type\": \"*/image\",\n      },\n      body: filedata,\n    };\n    let fetchData = await fetch(url, options)\n    let dataFetched = fetchData.json()\n    let imageCID = await dataFetched.then((result)=>{\n        return(result.value.cid)\n    })\n    let imageIPFS = \"ipfs://\" + imageCID\n    console.log(imageIPFS)\n\n    let coinbodyobj = {\n        \"name\": data.get(\"nftname\"),\n        \"image_url\": imageIPFS,\n        \n      }\n\n    let jsonData = await axios\n    .post(pinataURL, coinbodyobj, {\n        headers: {\n            pinata_api_key: pinataAPIkey,\n            pinata_secret_api_key: pinataSecret\n        }\n    })\n\n    let jsonIPFS = \"ipfs://\" + jsonData.data.IpfsHash\n    await console.log(data.get(\"mintID\"))\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    let bndata = await contractObj.getLatestPrice().then((response)=>{\n      return(response);\n    })\n    await console.log(\"Hello\")\n    let fiveusd = BigNumber(\"50\").multiply(BigNumber(\"100000000000000000000000000\")).divide(BigNumber(bndata.toString()));\n    let finalDol = BigNumber(fiveusd.toString()).add(BigNumber(1000000000))\n    await console.log(finalDol.toString())\n    // data.get(\"mintID\")\n    // let etherCalculation =  BigNumber(\"44000000000000000\").multiply(data.get(\"mintID\")).toString();\n    // await console.log(etherCalculation,\"asdasdda\");\n    // etherCalculation = etherCalculation\n    await console.log(data.get(\"nftname\"))\n    await console.log(data.get(\"nftsymbol\"))\n    await console.log(data.get(\"nftlimit\"))\n    await console.log(data.get(\"nftamount\"))\n    let namount = await data.get(\"nftamount\")\n    await console.log(namount*(10**18))\n    namount = BigNumber(namount*(10**18)).toString()\n    await console.log(\"---\",namount.toString())\n    await console.log(data.get(\"baseURI\"))\n    await console.log(data.get(\"radio\"))\n    await console.log(finalDol)\n    \n\n    try {\n      \n      await contractObj.createStorage(data.get(\"nftname\"),data.get(\"nftsymbol\"),data.get(\"nftlimit\"),namount,false,jsonIPFS,true,{ value: finalDol.toString() });\n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n    \n  };\n  \n  \n\n  const handleSetSlotURI = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(CONTRACT_ADDRESS,factoryabi,signer);\n    try {\n      \n      await contractObj.withdrawFees();\n    } catch (error) {\n      await console.log(error.message)\n      // setErrorHandler(error.message)\n      \n    }\n  };\n\n  function chunkArray(arr,n){\n    var chunkLength = Math.max(arr.length/n ,1);\n    var chunks = [];\n    for (var i = 0; i < n; i++) {\n        if(chunkLength*(i+1)<=arr.length)chunks.push(arr.slice(chunkLength*i, chunkLength*(i+1)));\n    }\n    return chunks; \n}\n\n\n  return (\n    <>\n\n<div id=\"app\" class=\"sub-app-section wf-section\">\n    <div class=\"sub-app-wrapper-1\">\n      <h2 class=\"sub-h2\">Deploy your NFT ERC-721 in minutes</h2>\n      <div class=\"w-form\">\n        <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\" method=\"get\" class=\"form\" onSubmit={handleMintNFT}>\n          <div class=\"div-block\">\n            <div class=\"div-block-2\">\n              <label for=\"text\" class=\"sub-form-label\">Enter your NFT collection/ project name*</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftname\" maxlength=\"256\" name=\"nftname\" data-name=\"Name 2\" placeholder=\"Eg. MY NFT Project\" id=\"nftname\" required=\"\"></input>\n              <label for=\"text\" class=\"sub-form-label\">Give your project a token name *</label>\n              <input type=\"text\" class=\"sub-input-field w-input nftsymbol\" maxlength=\"256\" name=\"nftsymbol\" data-name=\"Email 2\" placeholder=\"Eg: $MYNFT\" id=\"nftsymbol\" required=\"\"></input>\n              </div>\n              <div class=\"div-block-3\">\n                <label for=\"field-4\" class=\"sub-form-label\">Enter your NFT supply*</label>\n                <input type=\"text\" class=\"sub-input-field w-input nftlimit\" maxlength=\"256\" name=\"nftlimit\" data-name=\"Field 3\" placeholder=\"Eg: 8888 or 10000\" id=\"nftlimit\" required=\"\"></input>\n                <label for=\"field-4\" class=\"sub-form-label\">Enter price of each NFT *</label>\n                <input type=\"text\" class=\"sub-input-field w-input nftamount\" maxlength=\"256\" name=\"nftamount\" data-name=\"Field 2\" placeholder=\"Eg: 0.1 ETH, 0.08 ETH\" id=\"nftamount\" required=\"\"></input>\n            </div>\n          </div>\n          <div class=\"ipfs-input\">\n          <label for=\"text\" class=\"sub-form-label\">Enter IPFS Base URI of your NFT collection/ project*</label>\n          <input type=\"file\" class=\"sub-input-field w-input baseURI choose-file\" maxlength=\"256\" name=\"FormFile\" data-name=\"Email 2\" placeholder=\"Eg: $MYNFT\" id=\"FormFile\" required=\"\"></input>\n          </div>\n          <input type=\"submit\" value=\"DEPLOY CONTRACT\" data-wait=\"Please wait...\" class=\"submit-button w-button\"></input>\n        </form>\n        <div class=\"w-form-done\">\n          <div>Thank you! Your submission has been received!</div>\n        </div>\n        <div class=\"w-form-fail\">\n          <div>Oops! Something went wrong while submitting the form.</div>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  <div id=\"app\" class=\"sub-app-section withdraw-contract wf-section\">\n    <div class=\"sub-app-wrapper-1 withdraw-bloc\">\n      <div class=\"mint-grid\">\n        <div class=\"withdraw\">\n        <form onSubmit={handleSetSlotURI}>\n          <h2 class=\"sub-h2 mint-heading-copy\">Withdraw funds</h2>\n          <div class=\"contract-info\">You can withdraw your funds from below</div>\n          <button class=\"mint w-inline-block\">\n            <div class=\"text-block\">WITHDRAW FUNDS</div>\n          </button>\n          </form>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  <div id=\"app\" class=\"sub-recent wf-section\">\n    <div class=\"sub-app-wrapper-3\">\n      <h2 class=\"sub-h2\">Recent Deployments</h2>\n      <div class=\"w-layout-grid grid\">\n        <div id=\"w-node-_5c0edcd0-be75-3544-4a1a-61ea9d6c71eb-08db29d9\" class=\"info-card-main\">\n        <TxList txs={chunkArray(tableData,[2])[1]} />\n        </div>\n        \n        <div id=\"w-node-_5f9e2abd-4801-26ba-696e-77b214c9096f-08db29d9\" class=\"info-card-main\">\n        <TxList txs={chunkArray(tableData,[2])[0]} />\n        </div>\n      </div>\n    </div>\n  </div>\n        \n\n        {\n          // tableData.map(function(element){\n          //   return(\n\n              \n          //     )\n          // })\n        }\n\n\n        {/* <Link to={{\n    pathname: \"/blogs/0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7\",\n    state: {\n      fromText: \"this is data\",\n    }\n  }}>\n            <h2>0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</h2>\n            <p>Written by 0xf481809a8f2e451bd7d7253ad8f7ec3c65b971c7</p>\n          </Link> */}\n    \n      \n    \n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/Create.js",[],"/Users/madhurdixit/Downloads/yanft/src/BlogDetails.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159"],"import { useParams, useLocation } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport erc20abi from \"./ERC20abi.json\";\nimport borgabi from \"./Borg.json\";\nimport factoryabi from \"./Factoryabi.json\";\nimport erc721abi from \"./ERC721abi.json\";\nimport { fromPromise, gql } from \"@apollo/client\";\nimport { client } from \"./index\";\nimport BigNumber from \"big-number\";\nimport styles from \"./Styles.module.css\";\nimport icon from \"./assets/icon.png\";\nimport ErrorMessage from \"./ErrorMessage\";\n\n\nconst BlogDetails = () => {\n  const { id } = useParams();\n  const location = useLocation()\n  // const { from } = location.state\n  const [tableData, setTableData] = useState([]);\n  console.log(id)\n  const stateButton = {\n    button: 1,\n  };\n  const state = location.state.nftcontractdata  \n\n  const handleMintNFT = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(\"Nft contract : \",state.contractAddress)\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(state.contractAddress,erc721abi,signer);\n    try {\n      \n      await contractObj.mintNFT(data.get(\"nftid\"),{ value: state.mintAmount });\n    } catch (error) {\n      await console.log(error.message)\n      \n    }\n  };\n  \n  const handleUpdateNFT = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(\"Nft contract : \",state.contractAddress)\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(state.contractAddress,erc721abi,signer);\n    try {\n      \n      await contractObj.setNewBaseURI(data.get(\"baseuri\"));\n    } catch (error) {\n      await console.log(error.message)\n      \n    }\n  };\n  \n  const handleWithdrawFee = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    await console.log(\"Nft contract : \",state.contractAddress)\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const contractObj = new ethers.Contract(state.contractAddress,erc721abi,signer);\n    \n    try {\n      \n      await contractObj.withdrawFees();\n    } catch (error) {\n      await console.log(error.message)\n      \n    }\n  };\n\n  return (\n    <div className=\"blog-details\">\n    <div id=\"app\" class=\"sub-app-section mint-page wf-section\">\n    <div class=\"sub-app-wrapper-1 mint-block\">\n      <div class=\"mint-grid\">\n        <div class=\"div-block-7\">\n          <div class=\"mint-form w-form\">\n            <form id=\"email-form-2\" name=\"email-form-2\" data-name=\"Email Form 2\" method=\"get\" class=\"form-2\" onSubmit={handleMintNFT}>\n              <h2 class=\"sub-h2 mint-heading\">Mint an NFT</h2>\n              <div class=\"mint-input\"><label for=\"name-2\" class=\"sub-form-label\">Enter your NFT collection/ project name*</label>\n              <input type=\"text\" class=\"sub-input-field w-input\" maxlength=\"256\" name=\"nftid\" data-name=\"Name 2\" placeholder=\"Eg. 2,3,4\" id=\"name-2\" required=\"\"></input></div>\n              <input type=\"submit\" name=\"create bet\" value=\"Mint NFT\" data-wait=\"Please wait...\" class=\"submit-button w-button\"></input>\n            </form>\n            <div class=\"w-form-done\">\n              <div>Thank you! Your submission has been received!</div>\n            </div>\n            <div class=\"w-form-fail\">\n              <div>Oops! Something went wrong while submitting the form.</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"div-block-7\">\n          <h2 class=\"sub-h2 mint-heading\">Project Details</h2>\n          <div class=\"info-card mint-pade\">\n          <p class=\"contract-info\">\n        {console.log(state)}\n        Name : <strong> {state.tokenName}</strong><br></br>\n        Symbol : <strong> {state.tokenSymbol}</strong><br></br>\n        NFT Max Limit : <strong> {state.limit}</strong><br></br>\n        Mint Price : <strong> {(Number(state.mintAmount)/(10**18)).toString()} ETH</strong><br></br>\n        Dynamic NFT : <strong> {state.dynamic  ? \"true\" : \"false\"}</strong><br></br>\n        Owner : <strong> {state.contractInitialOwner}</strong><br></br>\n        \n      </p>\n          </div>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  <div id=\"app\" class=\"sub-app-section withdraw-page wf-section\">\n    <div class=\"sub-app-wrapper-1 withdraw-bloc\">\n      <div class=\"mint-grid\">\n        <div class=\"withdraw\">\n          <h2 class=\"sub-h2 mint-heading-copy\">Are you the project owner ?</h2>\n          <div class=\"contract-info\">You can withdraw your funds from below</div>\n          <form onSubmit={handleWithdrawFee}>\n          <button class=\"mint w-inline-block\" name=\"create bet\" value=\"create bet\">\n            <div class=\"text-block\">Withdraw your funds</div></button>\n            </form>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  <div id=\"app\" class=\"sub-app-section withdraw-page wf-section\">\n    <div class=\"sub-app-wrapper-1 withdraw-bloc\">\n      <div class=\"mint-grid\">\n        <div class=\"withdraw\">\n          <h2 class=\"sub-h2 mint-heading-copy\">Want To reveal NFT Art ?</h2>\n          <div class=\"contract-info\">You can update base URI to reveal ART here(only for owner)</div>\n          <form onSubmit={handleUpdateNFT}>\n          <input type=\"text\" class=\"sub-input-field w-input\" maxlength=\"256\" name=\"baseuri\" data-name=\"Name 2\" placeholder=\"ipfs://...\" id=\"name-2\" required=\"\"></input>\n          <button class=\"mint w-inline-block\" name=\"create bet\" value=\"create bet\">\n            <div class=\"text-block\">Update Base URI</div></button>\n            </form>\n        </div>\n      </div>\n      <div class=\"div-block-8 mint\"></div>\n    </div>\n  </div>\n  \n\n    </div>\n  );\n}\n \nexport default BlogDetails;\n\n// {\n//   \"__typename\": \"NftEntity\",\n//   \"id\": \"0xc3c21b6eb023909df4323865a7d2b3afdbd5828d\",\n//   \"contractAddress\": \"0xc3c21b6eb023909df4323865a7d2b3afdbd5828d\",\n//   \"contractInitialOwner\": \"0x0a145677ed307ea97b8ea6e506add16a0f47f182\",\n//   \"tokenName\": \"TtestNFT2\",\n//   \"tokenSymbol\": \"TNFT2\",\n//   \"limit\": \"40\",\n//   \"mintAmount\": \"30\",\n//   \"dynamic\": false\n// }","/Users/madhurdixit/Downloads/yanft/src/TxList3.js",["160","161"],"\nimport { Link } from 'react-router-dom';\nimport BigNumber from \"big-number\";\n\nexport default function TxList3({ txs }) {\n  if (txs === undefined || txs.length === 0) return null;\n  return (\n    <>\n      {txs\n        .map((item, idx) => (\n\n          <div key={idx} class=\"info-card\"><div id=\"w-node-_5f9e2abd-4801-26ba-696e-77b214c9096f-08db29d9\">\n          <p class=\"contract-info\">Proposal ID: {item.proposalID}</p>\n          <p class=\"contract-info\">Fund Address: {item.fundAddress}</p>\n          <p class=\"contract-info\">Fund Amount: {(Number(item.fundAmount)/(10**18)).toString()} ETH</p>\n          <p class=\"contract-info\">Proposal Status: {item.proposalStatus}</p>\n          {console.log(item.voteCount)}\n          <p class=\"contract-info\">Vote Count: {(Number(item.voteCount)/(10**18)).toString()} YaETH</p>\n          \n          </div>\n        </div>\n          \n        ))}\n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/TxList.js",["162"],"\nimport { Link } from 'react-router-dom';\nimport BigNumber from \"big-number\";\n\nexport default function TxList({ txs }) {\n  if (txs === undefined || txs.length === 0) return null;\n  return (\n    <>\n      {txs\n        .map((item, idx) => (\n\n          <div key={idx} class=\"info-card\"><div id=\"w-node-_5f9e2abd-4801-26ba-696e-77b214c9096f-08db29d9\">\n          <p class=\"contract-info\">Contract Address: {item.contractAddress}</p>\n          <p class=\"contract-info\">Project Owner: {item.contractInitialOwner}</p>\n          <p class=\"contract-info\">NFT Name: {item.tokenName}</p>\n          <p class=\"contract-info\">NFT Ticker: {item.tokenSymbol}</p>\n          <p class=\"contract-info\">Total Supply: {item.limit}</p>\n          <p class=\"contract-info\">Mint Amount: {(Number(item.mintAmount)/(10**18)).toString()} ETH</p>\n          {/* <p class=\"contract-info\">Mint Amount: {BigNumber(item.mintAmount).toString()}</p> */}\n          <p class=\"contract-info\">Preveal Feature: {item.dynamic ? \"true\" : \"false\"}</p>\n          <Link variant=\"body2\" class=\"mint w-inline-block\"\n              to={{\n                pathname: `/blogs/${item.id}`,\n                state: {\n                  nftcontractdata: item,\n                }}}\n                >\n            <div class=\"text-block mint-nft-btn\">MINT NFTS FROM THIS PROJECT</div>\n            </Link></div>\n        </div>\n          \n        ))}\n    </>\n  );\n}\n","/Users/madhurdixit/Downloads/yanft/src/ErrorMessage.js",[],"/Users/madhurdixit/Downloads/yanft/src/TxList2.js",["163","164"],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":17},{"ruleId":"169","severity":1,"message":"173","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":15},{"ruleId":"169","severity":1,"message":"174","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":14},{"ruleId":"169","severity":1,"message":"175","line":12,"column":8,"nodeType":"171","messageId":"172","endLine":12,"endColumn":12},{"ruleId":"169","severity":1,"message":"176","line":13,"column":10,"nodeType":"171","messageId":"172","endLine":13,"endColumn":14},{"ruleId":"169","severity":1,"message":"177","line":24,"column":10,"nodeType":"171","messageId":"172","endLine":24,"endColumn":13},{"ruleId":"169","severity":1,"message":"178","line":26,"column":10,"nodeType":"171","messageId":"172","endLine":26,"endColumn":15},{"ruleId":"169","severity":1,"message":"179","line":27,"column":24,"nodeType":"171","messageId":"172","endLine":27,"endColumn":39},{"ruleId":"169","severity":1,"message":"180","line":33,"column":10,"nodeType":"171","messageId":"172","endLine":33,"endColumn":21},{"ruleId":"169","severity":1,"message":"181","line":33,"column":23,"nodeType":"171","messageId":"172","endLine":33,"endColumn":37},{"ruleId":"169","severity":1,"message":"182","line":39,"column":7,"nodeType":"171","messageId":"172","endLine":39,"endColumn":16},{"ruleId":"183","severity":1,"message":"184","line":103,"column":6,"nodeType":"185","endLine":103,"endColumn":28,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"187","line":105,"column":9,"nodeType":"171","messageId":"172","endLine":105,"endColumn":24},{"ruleId":"169","severity":1,"message":"188","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":16},{"ruleId":"169","severity":1,"message":"189","line":3,"column":8,"nodeType":"171","messageId":"172","endLine":3,"endColumn":18},{"ruleId":"169","severity":1,"message":"190","line":5,"column":10,"nodeType":"171","messageId":"172","endLine":5,"endColumn":18},{"ruleId":"169","severity":1,"message":"191","line":5,"column":20,"nodeType":"171","messageId":"172","endLine":5,"endColumn":29},{"ruleId":"169","severity":1,"message":"192","line":7,"column":7,"nodeType":"171","messageId":"172","endLine":7,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":21,"column":20,"nodeType":"195","endLine":21,"endColumn":72},{"ruleId":"193","severity":1,"message":"194","line":22,"column":26,"nodeType":"195","endLine":22,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":23,"column":26,"nodeType":"195","endLine":23,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":24,"column":27,"nodeType":"195","endLine":24,"endColumn":59},{"ruleId":"193","severity":1,"message":"194","line":25,"column":24,"nodeType":"195","endLine":25,"endColumn":56},{"ruleId":"169","severity":1,"message":"173","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":15},{"ruleId":"169","severity":1,"message":"174","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":14},{"ruleId":"169","severity":1,"message":"175","line":12,"column":8,"nodeType":"171","messageId":"172","endLine":12,"endColumn":12},{"ruleId":"169","severity":1,"message":"176","line":13,"column":10,"nodeType":"171","messageId":"172","endLine":13,"endColumn":14},{"ruleId":"169","severity":1,"message":"177","line":24,"column":10,"nodeType":"171","messageId":"172","endLine":24,"endColumn":13},{"ruleId":"169","severity":1,"message":"178","line":26,"column":10,"nodeType":"171","messageId":"172","endLine":26,"endColumn":15},{"ruleId":"169","severity":1,"message":"179","line":27,"column":24,"nodeType":"171","messageId":"172","endLine":27,"endColumn":39},{"ruleId":"169","severity":1,"message":"180","line":33,"column":10,"nodeType":"171","messageId":"172","endLine":33,"endColumn":21},{"ruleId":"169","severity":1,"message":"181","line":33,"column":23,"nodeType":"171","messageId":"172","endLine":33,"endColumn":37},{"ruleId":"169","severity":1,"message":"196","line":38,"column":7,"nodeType":"171","messageId":"172","endLine":38,"endColumn":17},{"ruleId":"183","severity":1,"message":"184","line":89,"column":6,"nodeType":"185","endLine":89,"endColumn":28,"suggestions":"197"},{"ruleId":"169","severity":1,"message":"187","line":91,"column":9,"nodeType":"171","messageId":"172","endLine":91,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":122,"column":22,"nodeType":"200","messageId":"201","endLine":122,"endColumn":24},{"ruleId":"169","severity":1,"message":"202","line":148,"column":11,"nodeType":"171","messageId":"172","endLine":148,"endColumn":21},{"ruleId":"169","severity":1,"message":"190","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":18},{"ruleId":"169","severity":1,"message":"191","line":2,"column":20,"nodeType":"171","messageId":"172","endLine":2,"endColumn":29},{"ruleId":"169","severity":1,"message":"188","line":3,"column":10,"nodeType":"171","messageId":"172","endLine":3,"endColumn":16},{"ruleId":"169","severity":1,"message":"203","line":4,"column":8,"nodeType":"171","messageId":"172","endLine":4,"endColumn":16},{"ruleId":"169","severity":1,"message":"173","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":15},{"ruleId":"169","severity":1,"message":"189","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":18},{"ruleId":"169","severity":1,"message":"204","line":7,"column":10,"nodeType":"171","messageId":"172","endLine":7,"endColumn":13},{"ruleId":"169","severity":1,"message":"205","line":8,"column":10,"nodeType":"171","messageId":"172","endLine":8,"endColumn":16},{"ruleId":"169","severity":1,"message":"206","line":9,"column":8,"nodeType":"171","messageId":"172","endLine":9,"endColumn":17},{"ruleId":"169","severity":1,"message":"174","line":10,"column":8,"nodeType":"171","messageId":"172","endLine":10,"endColumn":14},{"ruleId":"169","severity":1,"message":"175","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":12},{"ruleId":"169","severity":1,"message":"207","line":13,"column":8,"nodeType":"171","messageId":"172","endLine":13,"endColumn":20},{"ruleId":"169","severity":1,"message":"208","line":14,"column":8,"nodeType":"171","messageId":"172","endLine":14,"endColumn":14},{"ruleId":"169","severity":1,"message":"173","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":15},{"ruleId":"169","severity":1,"message":"174","line":10,"column":8,"nodeType":"171","messageId":"172","endLine":10,"endColumn":14},{"ruleId":"169","severity":1,"message":"175","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":12},{"ruleId":"169","severity":1,"message":"176","line":12,"column":10,"nodeType":"171","messageId":"172","endLine":12,"endColumn":14},{"ruleId":"169","severity":1,"message":"209","line":20,"column":9,"nodeType":"171","messageId":"172","endLine":20,"endColumn":14},{"ruleId":"169","severity":1,"message":"177","line":23,"column":10,"nodeType":"171","messageId":"172","endLine":23,"endColumn":13},{"ruleId":"169","severity":1,"message":"178","line":25,"column":10,"nodeType":"171","messageId":"172","endLine":25,"endColumn":15},{"ruleId":"169","severity":1,"message":"179","line":26,"column":24,"nodeType":"171","messageId":"172","endLine":26,"endColumn":39},{"ruleId":"169","severity":1,"message":"180","line":32,"column":10,"nodeType":"171","messageId":"172","endLine":32,"endColumn":21},{"ruleId":"169","severity":1,"message":"181","line":32,"column":23,"nodeType":"171","messageId":"172","endLine":32,"endColumn":37},{"ruleId":"183","severity":1,"message":"184","line":90,"column":6,"nodeType":"185","endLine":90,"endColumn":28,"suggestions":"210"},{"ruleId":"169","severity":1,"message":"211","line":156,"column":11,"nodeType":"171","messageId":"172","endLine":156,"endColumn":15},{"ruleId":"169","severity":1,"message":"173","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":15},{"ruleId":"169","severity":1,"message":"174","line":10,"column":8,"nodeType":"171","messageId":"172","endLine":10,"endColumn":14},{"ruleId":"169","severity":1,"message":"175","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":12},{"ruleId":"169","severity":1,"message":"176","line":12,"column":10,"nodeType":"171","messageId":"172","endLine":12,"endColumn":14},{"ruleId":"169","severity":1,"message":"209","line":26,"column":9,"nodeType":"171","messageId":"172","endLine":26,"endColumn":14},{"ruleId":"169","severity":1,"message":"177","line":29,"column":10,"nodeType":"171","messageId":"172","endLine":29,"endColumn":13},{"ruleId":"169","severity":1,"message":"178","line":31,"column":10,"nodeType":"171","messageId":"172","endLine":31,"endColumn":15},{"ruleId":"169","severity":1,"message":"179","line":32,"column":24,"nodeType":"171","messageId":"172","endLine":32,"endColumn":39},{"ruleId":"169","severity":1,"message":"180","line":38,"column":10,"nodeType":"171","messageId":"172","endLine":38,"endColumn":21},{"ruleId":"169","severity":1,"message":"181","line":38,"column":23,"nodeType":"171","messageId":"172","endLine":38,"endColumn":37},{"ruleId":"183","severity":1,"message":"184","line":96,"column":6,"nodeType":"185","endLine":96,"endColumn":28,"suggestions":"212"},{"ruleId":"169","severity":1,"message":"187","line":98,"column":9,"nodeType":"171","messageId":"172","endLine":98,"endColumn":24},{"ruleId":"169","severity":1,"message":"211","line":192,"column":11,"nodeType":"171","messageId":"172","endLine":192,"endColumn":15},{"ruleId":"169","severity":1,"message":"191","line":2,"column":20,"nodeType":"171","messageId":"172","endLine":2,"endColumn":29},{"ruleId":"169","severity":1,"message":"203","line":4,"column":8,"nodeType":"171","messageId":"172","endLine":4,"endColumn":16},{"ruleId":"169","severity":1,"message":"173","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":15},{"ruleId":"169","severity":1,"message":"189","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":18},{"ruleId":"169","severity":1,"message":"213","line":8,"column":10,"nodeType":"171","messageId":"172","endLine":8,"endColumn":21},{"ruleId":"169","severity":1,"message":"204","line":8,"column":23,"nodeType":"171","messageId":"172","endLine":8,"endColumn":26},{"ruleId":"169","severity":1,"message":"205","line":9,"column":10,"nodeType":"171","messageId":"172","endLine":9,"endColumn":16},{"ruleId":"169","severity":1,"message":"206","line":10,"column":8,"nodeType":"171","messageId":"172","endLine":10,"endColumn":17},{"ruleId":"169","severity":1,"message":"174","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":14},{"ruleId":"169","severity":1,"message":"175","line":12,"column":8,"nodeType":"171","messageId":"172","endLine":12,"endColumn":12},{"ruleId":"169","severity":1,"message":"207","line":13,"column":8,"nodeType":"171","messageId":"172","endLine":13,"endColumn":20},{"ruleId":"169","severity":1,"message":"214","line":20,"column":10,"nodeType":"171","messageId":"172","endLine":20,"endColumn":19},{"ruleId":"169","severity":1,"message":"215","line":20,"column":21,"nodeType":"171","messageId":"172","endLine":20,"endColumn":33},{"ruleId":"169","severity":1,"message":"216","line":22,"column":9,"nodeType":"171","messageId":"172","endLine":22,"endColumn":20},{"ruleId":"169","severity":1,"message":"211","line":65,"column":11,"nodeType":"171","messageId":"172","endLine":65,"endColumn":15},{"ruleId":"169","severity":1,"message":"176","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":14},{"ruleId":"169","severity":1,"message":"206","line":3,"column":8,"nodeType":"171","messageId":"172","endLine":3,"endColumn":17},{"ruleId":"169","severity":1,"message":"206","line":3,"column":8,"nodeType":"171","messageId":"172","endLine":3,"endColumn":17},{"ruleId":"169","severity":1,"message":"176","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":14},{"ruleId":"169","severity":1,"message":"206","line":3,"column":8,"nodeType":"171","messageId":"172","endLine":3,"endColumn":17},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"no-unused-vars","'erc721abi' is defined but never used.","Identifier","unusedVar","'borgabi' is defined but never used.","'styles' is defined but never used.","'icon' is defined but never used.","'Link' is defined but never used.","'txs' is assigned a value but never used.","'error' is assigned a value but never used.","'setContractInfo' is assigned a value but never used.","'balanceInfo' is assigned a value but never used.","'setBalanceInfo' is assigned a value but never used.","'totalVote' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'contractListened'. Either include it or remove the dependency array.","ArrayExpression",["219"],"'setErrorHandler' is assigned a value but never used.","'ethers' is defined but never used.","'factoryabi' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'CONTRACT_ADDRESS' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'totalVote2' is assigned a value but never used.",["220"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'erc721ObjL' is assigned a value but never used.","'erc20abi' is defined but never used.","'gql' is defined but never used.","'client' is defined but never used.","'BigNumber' is defined but never used.","'ErrorMessage' is defined but never used.","'TxList' is defined but never used.","'state' is assigned a value but never used.",["221"],"'data' is assigned a value but never used.",["222"],"'fromPromise' is defined but never used.","'tableData' is assigned a value but never used.","'setTableData' is assigned a value but never used.","'stateButton' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"223","fix":"225"},{"desc":"223","fix":"226"},{"desc":"223","fix":"227"},"Update the dependencies array to be: [contractInfo.address, contractListened]",{"range":"228","text":"229"},{"range":"230","text":"229"},{"range":"231","text":"229"},{"range":"232","text":"229"},[2527,2549],"[contractInfo.address, contractListened]",[2137,2159],[2220,2242],[2708,2730]]